'''
********************************************************************************
Justin Lanan & Steven Shi
"Simulating Phagocytosis in Hexagonal Coordinates"
Group 6 - Final Project
Software Carpentry
Due: 12/19/2022

Main protocol does...
!!!
    Important Detail:
!!!!
********************************************************************************
'''

from PIL import Image
import math


def construct_backdrop(width, px_max, py_max, name):
    '''
    White backdrop image creation.

    **Parameters**

    **Returns**

    '''
    # Make white rectangular backdrop
    img = Image.new(mode="RGB", size=(px_max, py_max), color=(255, 255, 255))
    if not name.endswith(".png"):
        name += ".png"

    # Get hexagon height and max_x internal quadrant dimension
    height = width / 2 * 3 ** 0.5
    max_x = [(round(width / 2 - j * 1 / 3 ** 0.5)) for j in range(round(height / 2))]
    # max_x = [(math.ceil(width / 2 - j * 1 / 3 ** 0.5)) for j in range(math.ceil(height / 2))]

    # Make a red hexagon at (hx,hy) = (0,0)
    o_shift_x, o_shift_y = math.floor(width / 2), math.floor(height / 2)

    for j, item in enumerate(max_x):
        for i in range(item):
            img.putpixel((o_shift_x + i, o_shift_y + j), (255, 0, 0))
            img.putpixel((o_shift_x - i, o_shift_y + j), (255, 0, 0))
            img.putpixel((o_shift_x - i, o_shift_y - j), (255, 0, 0))
            img.putpixel((o_shift_x + i, o_shift_y - j), (255, 0, 0))

    # Make a green hexagon at 1,0
    hx, hy = 1, 0
    shift_x = math.floor(width / 2 + width / 2 * (hx * 3 / 2))
    shift_y = math.floor(height / 2 + width / 2 * (hx / 2 * 3 ** 0.5 + hy * 3 ** 0.5))
    for j, item in enumerate(max_x):
        for i in range(item):
            img.putpixel((shift_x + i, shift_y + j), (0, 255, 0))
            img.putpixel((shift_x - i, shift_y + j), (0, 255, 0))
            img.putpixel((shift_x - i, shift_y - j), (0, 255, 0))
            img.putpixel((shift_x + i, shift_y - j), (0, 255, 0))

    # Make a black hexagon at 0,1
    hx, hy = 0, 1
    shift_x = math.floor(width / 2 + width / 2 * (hx * 3 / 2))
    shift_y = math.floor(height / 2 + width / 2 * (hx / 2 * 3 ** 0.5 + hy * 3 ** 0.5))
    for j, item in enumerate(max_x):
        for i in range(item):
            img.putpixel((shift_x + i, shift_y + j), (0, 0, 0))
            img.putpixel((shift_x - i, shift_y + j), (0, 0, 0))
            img.putpixel((shift_x - i, shift_y - j), (0, 0, 0))
            img.putpixel((shift_x + i, shift_y - j), (0, 0, 0))

    # Make a blue hexagon at 1,1
    hx, hy = 1, 1
    shift_x = math.floor(width / 2 + width / 2 * (hx * 3 / 2))
    shift_y = math.floor(height / 2 + width / 2 * (hx / 2 * 3 ** 0.5 + hy * 3 ** 0.5))
    for j, item in enumerate(max_x):
        for i in range(item):
            img.putpixel((shift_x + i, shift_y + j), (0, 0, 255))
            img.putpixel((shift_x - i, shift_y + j), (0, 0, 255))
            img.putpixel((shift_x - i, shift_y - j), (0, 0, 255))
            img.putpixel((shift_x + i, shift_y - j), (0, 0, 255))

    # Save out the image
    img.save(name)


if __name__ == "__main__":
    pixel_width_of_hex = 21
    px_max, py_max = 1600, 900
    image_name = "backdrop"
    construct_backdrop(pixel_width_of_hex, px_max, py_max, image_name)
